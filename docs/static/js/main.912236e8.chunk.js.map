{"version":3,"sources":["model/md/createTextElement.md","model/md/createElement.md","model/md/render.md","component/header/index.js","component/list/index.js","model/index.js","pages/home/index.js","util/url.js","component/markdown/index.js","component/edit/index.js","model/config.js","component/unittest/index.js","pages/problem/index.js","index.js"],"names":["module","exports","Header","props","className","path","style","marginLeft","onClick","window","location","href","isPrevSuccess","data","currentIndex","prevIndex","status","List","map","index","key","id","title","Data","localStorage","getItem","undefined","JSON","parse","steps","markdown","require","codes","cases","fn","value","type","nodeValue","children","getData","HEADER","actived","React","createContext","Home","state","console","log","this","onChange","setState","activeIndex","Component","get","name","start","indexOf","paramsArray","substr","length","split","i","paramArray","shift","join","MarkDown","dangerouslySetInnerHTML","__html","html","Edit","width","height","fontSize","mode","theme","onBlur","e","edit","getValue","UNIT_TEST_CONFIG","UnitTest","Fragment","unit","correctValue","stringify","toString","Problem","getUrl","that","onmessage","push","stepObj","getStep","UnitTestStatus","forceUpdate","scrollTop","innerHeight","saveData","setItem","yAxis","document","querySelector","content","setTimeout","obj","frames","postMessage","src","Router","Route","ReactDOM","render","exact","component","getElementById"],"mappings":"mSAGAA,EAAOC,QAFI,grB,iBCEXD,EAAOC,QAFI,qwC,iBCEXD,EAAOC,QAFI,uqB,0NCGI,SAASC,EAAOC,GAE7B,OAAO,yBAAKC,UAAU,UACpB,yBAAKA,UAAU,cACb,uDAEkB,QAAdD,EAAME,KAAiB,KAAO,4BAAQD,UAAU,gBAAgBE,MAAO,CAACC,WAAY,QAAUC,QAAS,WACrGC,OAAOC,SAASC,KAAO,OADK,+B,MCNxC,SAASC,EAAcC,EAAMC,GAGzB,IAAIC,IAAcD,EAClB,OAAGC,EAAY,GAKc,iBAAnBF,EAAKE,IAAqD,WAA1BF,EAAKE,GAAWC,OAQ/C,SAASC,EAAKd,GACzB,OAAO,wBAAIC,UAAU,SAEbD,EAAMU,KAAKK,KAAI,SAACL,EAAMM,GAClB,OAAQ,wBAAIf,UAAU,WAAWgB,IAAKD,GAClC,0BAAMf,UAAU,SAASS,EAAKQ,GAA9B,KACA,0BAAMjB,UAAU,SAASS,EAAKS,OAC9B,4BAAQlB,UAAWQ,EAAcT,EAAMU,KAAMM,GAAS,gBAAkB,4BAA6BX,QAAS,WACnE,GAApCI,EAAcT,EAAMU,KAAMM,KACzBV,OAAOC,SAASC,KAAO,gBAAkBE,EAAKQ,MAGnC,QAAfR,EAAKG,OAAmB,eAAO,2BC+GhD,IAAMO,EA3Ib,WACE,IAAIV,EAAOW,aAAaC,QAAQ,UAChC,YAAYC,GAARb,GAAoC,iBAARA,EACvBc,KAAKC,MAAMf,GAGb,CACLS,MAAO,2BACPO,MAAO,CAAC,CACNR,GAAI,EACJC,MAAO,oBACPQ,SAAUC,EAAQ,IAClBC,MAAM,sMAWNC,MAAO,CAAC,CACNX,MAAO,iCACPY,GAAI,iCACJC,MAAO,CACLC,KAAM,eACNjC,MAAO,CACLkC,UAAW,YACXC,SAAU,QAIf,CACDjB,GAAI,EACJC,MAAO,gBACPQ,SAAUC,EAAQ,IAClBC,MAAM,yiBAwBNC,MAAO,CAAC,CACNX,MAAO,yCACPY,GAAI,yCACJC,MAAO,CACL,KAAQ,KACR,MAAS,CACP,SAAY,CACV,CACE,KAAQ,eACR,MAAS,CACP,UAAa,YACb,SAAY,WAOvB,CACDd,GAAI,EACJC,MAAO,SACPQ,SAAUC,EAAQ,IAClBC,MAAM,ghCA4CNC,MAAO,CAAC,CACNX,MAAM,wFAENY,GAAI,oNACJC,MAAO,0BAOKI,GAuBTC,EAAS,CAAC,CACnBrB,MAAO,EACPG,MAAO,eACPmB,SAAS,GACR,CACDtB,MAAO,EACPG,MAAO,gBACPU,MAAO,CAAC,CACNG,MAAO,OAImBO,IAAMC,cAAcH,G,ICnK7BI,E,kDACjB,WAAYzC,GAAQ,IAAD,8BACf,cAAMA,IACD0C,MAAQ,CACTL,OAAQA,GAHG,E,qDAMT,IAAD,OAEL,OADAM,QAAQC,IAAI,OAAQxB,GACb,6BACH,kBAACrB,EAAD,CAAQW,KAAMmC,KAAKH,MAAML,OAAQnC,KAAK,SAEtC,yBAAKD,UAAU,QACX,kBAACa,EAAD,CAAMJ,KAAMU,EAAKM,MAAOoB,SAAU,SAAC9B,GAC/B,EAAK+B,SAAS,CACVC,YAAahC,a,GAfHiC,a,OChB3B,SAASC,EAAIC,GAKhB,IAHA,IAAIC,EAAQ9C,OAAOC,SAASC,KAAK6C,QAAQ,KAErCC,EADiBhD,OAAOC,SAASC,KAAK+C,OAAOH,EAAQ,EAAG9C,OAAOC,SAASC,KAAKgD,QAChDC,MAAM,KAC9BC,EAAI,EAAGA,EAAIJ,EAAYE,OAAQE,IAAK,CACzC,IACIC,EADQL,EAAYI,GACDD,MAAM,KAC7B,GAAIE,EAAW,IAAMR,EAEjB,OADAQ,EAAWC,QACJD,EAAWE,KAAK,M,YCNpB,SAASC,EAAS9D,GAC7B,OAAO,yBAAKC,UAAU,yBAAyBiB,GAAG,YAC9C,yBAAK6C,wBAAyB,CAACC,OAAQhE,EAAMiE,S,iCCMtC,SAASC,EAAKlE,GACzB,OAAO,yBAAKC,UAAU,eAClB,kBAAC,IAAD,CAAWE,MAAO,CAACgE,MAAO,OAAQC,OAAQ,QAASC,SAAU,GAAIC,KAAK,OAAOC,MAAM,SAASvC,MAAOhC,EAAM6B,MAAO2C,OAAQ,SAACC,EAAGC,GACxH1E,EAAMwE,QAAUxE,EAAMwE,OAAOE,EAAKC,gBCfvC,IAAIC,EAAmB,CAC1B,MAAS,2BACT,QAAW,uCACX,MAAS,4B,MCQE,SAASC,EAAS7E,GAE7B,OAAO,kBAAC,IAAM8E,SAAP,KAEiB,OAAhB9E,EAAMa,OACN,wBAAIZ,UAAU,cAEU,UAAhBD,EAAMa,OAAqB,uCACX,OAAhBb,EAAMa,OAAkB,uCACxB,IAGN,KAEN,yBAAKZ,UAAU,0BAUf,yBAAKA,UAAU,SAEPD,EAAMU,KAAKK,KAAI,SAACgE,EAAM/D,GAIlB,OAFA2B,QAAQC,IAAI,OAAQmC,EAAM,QAAS/D,GAE5B,yBAAKf,UAAU,OAAOgB,IAAKD,GAC9B,wBAAIf,UAA0B,SAAf8E,EAAKlE,OAAoB,gBAAkB,eAAgB+D,EAAiBG,EAAKlE,SAChG,2BAAG,mDACH,6BACI,0BAAMZ,UAAU,eACX8E,EAAK5D,QAId,2BAAG,mDACH,6BACI,0BAAMlB,UAAU,oBAEasB,GAArBwD,EAAKC,aAA4B,YAA0C,iBAArBD,EAAKC,aAA2BxD,KAAKyD,UAAUF,EAAKC,aAAc,KAAM,GAAKD,EAAKC,aAAaE,aAKjK,2BAAG,mDACH,6BACI,0BAAMjF,UAAU,oBAEMsB,GAAdwD,EAAK/C,MAAqB,YAAmC,iBAAd+C,EAAK/C,MAAoBR,KAAKyD,UAAUF,EAAK/C,MAAO,KAAM,GAAK+C,EAAK/C,MAAMkD,oB,ICrCxIC,E,kDACjB,WAAYnF,GAAQ,IAAD,uBACf,cAAMA,IAED0C,MAAQ,CACTxB,GAAIkE,EAAO,MACX/C,OAAQA,EACRwC,SAAU,IAWd,IAAIQ,EAAI,eAjBO,OAkBf/E,OAAOgF,UAAY,SAASb,GACxBY,EAAK3C,MAAMmC,SAASU,KAAKd,EAAE/D,MAE3B,IAAI8E,EAAUH,EAAKI,UACC,SAAjBhB,EAAE/D,KAAKG,OACN2E,EAAQ3E,OAAS,OAEjB2E,EAAQ3E,OAAS,UAGrBwE,EAAK3C,MAAMgD,eAAiB,MAC5BL,EAAKM,cAGLN,EAAKO,UAAUtF,OAAOuF,YAAc,IAcpCR,EAAKM,cAELN,EAAKS,YAhDM,E,uDA+DfzE,aAAa0E,QAAQ,SAAUvE,KAAKyD,UAAU7D,M,gCAExC,IACAF,EAAO2B,KAAKH,MAAZxB,GAEN,OADcE,EAAI,MAAUF,EAAK,K,gCAG3B8E,GACNC,SAASC,cAAc,kBAAkBN,UAAYI,I,+BAE/C,IAAD,OACDR,EAAU3C,KAAK4C,UACnB,OACI,kBAAC,IAAMX,SAAP,KAII,kBAAC/E,EAAD,CAAQW,KAAMmC,KAAKH,MAAML,SAEzB,yBAAKpC,UAAU,WACX,yBAAKA,UAAU,gBAEX,kBAAC6D,EAAD,CAAUG,KAAwB,iBAAXuB,EAAsBA,EAAQ7D,SAAW,MAEpE,yBAAK1B,UAAU,iBACX,kBAACiE,EAAD,CAAMrC,MAAyB,iBAAX2D,EAAsBA,EAAQ3D,MAAQ,UAAW2C,OAAQ,SAAC2B,GAC1EX,EAAQ3D,MAAQsE,KAEpB,uBAAGlG,UAAU,YACT,4BAAQA,UAAwC,OAA7B4C,KAAKH,MAAMgD,eAA0B,MAAQ,kBAAmBvF,MAAO,CAAE,MAAS,QAAS,UAAa,OAAQ,WAAc,OAAQE,QAAS,SAACoE,GAK/J,GAAgC,OAA7B,EAAK/B,MAAMgD,eAAyB,OAAO,EAC9C,EAAKI,kBAGEN,EAAQ3E,OAEf,EAAK6B,MAAMmC,SAAW,GACtB,EAAKnC,MAAMgD,eAAiB,MAC5B,EAAKC,cAGL,EAAKC,UAAUtF,OAAOuF,YAAc,KAQpCO,YAAW,WAEP,IAAIC,EAAMb,EAAQ1D,MARV,GAURxB,OAAOgG,OAAO,GAAGC,YAAY,CAVrB,EAU6Bf,EAAQ3D,MAAOwE,EAAItE,GAAIsE,EAAIrE,MAAOqE,EAAIlF,OAAQ,OAMpF,OAS8B,OAA7B0B,KAAKH,MAAMgD,eAA0B,2BAAS,0BAI1D,kBAACb,EAAD,CAAUhE,OAAQgC,KAAKH,MAAMgD,eAAiBhF,KAAMmC,KAAKH,MAAMmC,WAC/D,4BAAQ3D,GAAG,SAAUsF,IAAI,gBAAgBrG,MAAO,CAAC,QAAW,iB,GA7I/C8C,aCZrCN,QAAQC,IAAI6D,IAAQC,IAAOjE,EAAK0C,GAYhCwB,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAAC3G,KAAK,IAAI4G,UAAWrE,IACjC,kBAAC,IAAD,CAAOvC,KAAK,WAAW4G,UAAW3B,MAGtCc,SAASc,eAAe,W","file":"static/js/main.912236e8.chunk.js","sourcesContent":["// Module\nvar code = \"<h2 id=createtextelement>createTextElement</h2> <p><code>createTextElement</code>函数主要功能返回一个字符节点对象</p> <p><strong>目标</strong></p> <ol> <li>创建一个createTextElement函数;</li> <li>返回文字类型对象;</li> </ol> <p><strong>例子</strong></p> <pre><code class=language-js>createTextElement(&quot;hi React&quot;);</code></pre> <p><strong>输出</strong></p> <pre><code class=language-js>{\\n    type: &quot;TEXT_ELEMENT&quot;,\\n    props: {\\n      nodeValue: &quot;hi React&quot;,\\n      children: [],\\n    },\\n  }\\n}\\n</code></pre> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h2 id=createelement>CreateElement</h2> <p><code>createElement</code>函数主要功能是返回一个数据对象。</p> <p><strong>目标</strong></p> <ol> <li>创建一个CreateElement函数;</li> <li>返回特定的对象;</li> </ol> <p><strong>例子</strong></p> <pre><code class=language-js>var element = `&lt;h1&gt;hi React&lt;/h1&gt;`;\\ncreateElement(element);</code></pre> <p><strong>输出</strong></p> <pre><code class=language-js>{\\n    type: &quot;h1&quot;,\\n    props: null,\\n    children: {\\n        type: &quot;TEXT_ELEMENT&quot;,\\n        props: null，\\n        children: &quot;Hi React&quot;\\n    }\\n}</code></pre> <p><strong>节点嵌套</strong></p> <pre><code class=language-js>var element = `&lt;h1&gt;&lt;i&gt;hi React&lt;/i&gt;&lt;/h1&gt;`;\\ncreateElement(element);</code></pre> <p><strong>输出</strong></p> <pre><code class=language-js>{\\n    type: &quot;h1&quot;,\\n    props: null,\\n    children: [{\\n        type: &quot;i&quot;,\\n        props: null,\\n        children: [{\\n            type: &quot;TEXT_ELEMENT&quot;,\\n            props: null,\\n            children: &quot;Hi React&quot;\\n        }]\\n    }]\\n}</code></pre> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h2 id=render>render</h2> <p><code>render</code>函数作用是将<code>createElement</code>生成的对象变成DOM节点;</p> <p><strong>目标</strong></p> <ol> <li>创建一个render函数;</li> </ol> <p><strong>例子</strong></p> <pre><code class=language-js>var element = `&lt;h1&gt;hi React&lt;/h1&gt;`;\\nrender(element, document.getElementByID(&quot;root&quot;));</code></pre> <p><strong>输出</strong> 在<code>id</code>为<code>root</code>节点上生成一个<code>h1</code>标签，标签的内容是<code>hi React</code></p> \";\n// Exports\nmodule.exports = code;","import \"./nav.scss\";\r\nimport \"./list.scss\";\r\nimport React from \"react\";\r\n\r\nexport default function Header(props){\r\n\r\n  return <div className=\"header\">    \r\n    <div className=\"nav shadow\">\r\n      <h1>React Render实现 \r\n        {\r\n          props.path == \"home\" ? null : <button className=\"btn btn-small\" style={{marginLeft: \"20px\" }} onClick={()=>{\r\n            window.location.href = \"#/\";\r\n          }}>返回列表</button> \r\n        }\r\n      </h1>      \r\n    </div>\r\n    {/* \r\n    <ul className=\"list clearfix\">\r\n      {\r\n        props.data.map((obj, index)=>{\r\n          return <li key={index} className={obj.actived  ? \"active\" : \"\"} onClick={()=>{            \r\n            props.onChange && props.onChange(index);\r\n          }}>{index + 1}. {obj.title}</li>\r\n        })\r\n      }\r\n    </ul> */}\r\n  </div>\r\n}","// 创建List\r\nimport React from \"react\";\r\nimport \"./index.scss\";\r\n\r\nfunction isPrevSuccess(data, currentIndex){\r\n    \r\n    //第一个默认成功\r\n    var prevIndex = --currentIndex;\r\n    if(prevIndex < 0) {\r\n        return true;\r\n    }\r\n\r\n    // 判断之前的列表是否success\r\n    if(typeof data[prevIndex] == \"object\" &&  data[prevIndex].status == \"success\" ){\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n\r\n}\r\n\r\nexport default function List(props){\r\n    return <ul className=\"steps\">                        \r\n        {\r\n            props.data.map((data, index)=>{                \r\n                return (<li className=\"clearfix\" key={index}>\r\n                    <span className=\"index\">{data.id}.</span>\r\n                    <span className=\"title\">{data.title}</span>\r\n                    <button className={isPrevSuccess(props.data, index) ? \"btn btn-small\" : 'btn btn-small btn-disable'} onClick={()=>{\r\n                        if(isPrevSuccess(props.data, index) == true){\r\n                            window.location.href = \"#/problem?id=\" + data.id;\r\n                        }\r\n                    }}>{\r\n                        data.status != \"lock\" ? \"练习\" : \"未解锁\"\r\n                    }</button>\r\n                </li>)\r\n            })\r\n        }        \r\n    </ul>\r\n}","import React from 'react'\r\n\r\n/*\r\n* 创建公共数据，用于数据展示（v1.0暂时不需要先写固定）\r\n*/\r\nfunction getData () {\r\n  var data = localStorage.getItem('_DATA_')\r\n  if (data != undefined && typeof data == 'string') {\r\n    return JSON.parse(data)\r\n  }\r\n\r\n  return {\r\n    title: 'React Render实现',\r\n    steps: [{\r\n      id: 1,\r\n      title: 'createTextElement',      \r\n      markdown: require('./md/createTextElement.md'),      \r\n      codes: `/*\r\n* 创建createTextElement方法\r\n* @type: 文本内容\r\n*/ \r\nfunction createTextElement(text){\r\n    /* 填写代码 */ \r\n    return {\r\n        \r\n    }\r\n}\r\n`,\r\n      cases: [{\r\n        title: 'createTextElement(\"hi react!\")',\r\n        fn: 'createTextElement(\"hi react!\")',\r\n        value: {\r\n          type: 'TEXT_ELEMENT',\r\n          props: {\r\n            nodeValue: 'hi react!',\r\n            children: []\r\n          }\r\n        }\r\n      }]\r\n    }, {\r\n      id: 2,\r\n      title: 'createElement',      \r\n      markdown: require('./md/createElement.md'),\r\n      codes: `/*\r\n* 创建createTextElement方法\r\n* @type: 文本内容\r\n*/             \r\nfunction createTextElement(text){    \r\n    return {\r\n        type: \"TEXT_ELEMENT\",\r\n        props: {\r\n            nodeValue: text,\r\n            children:[]\r\n        }\r\n    }\r\n}\r\n            \r\n/*\r\n* 创建createElement方法\r\n* @type: 标签类型\r\n* @props: 标签属性\r\n* @children: 子标签\r\n*/ \r\nfunction createElement(type, props, ...children){\r\n    /* 填写代码 */ \r\n}            \r\n`,\r\n      cases: [{\r\n        title: 'createElement(\"hi\", null, \"hi react!\")',\r\n        fn: 'createElement(\"hi\", null, \"hi react!\")',\r\n        value: {\r\n          'type': 'hi',\r\n          'props': {\r\n            'children': [\r\n              {\r\n                'type': 'TEXT_ELEMENT',\r\n                'props': {\r\n                  'nodeValue': 'hi react!',\r\n                  'children': []\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      }]\r\n    }, {\r\n      id: 3,\r\n      title: 'render',\r\n      markdown: require('./md/render.md'),\r\n      codes: `/*\r\n* 创建createTextElement方法\r\n* @type: 文本内容\r\n*/             \r\nfunction createTextElement(text){    \r\n    return {\r\n        type: \"TEXT_ELEMENT\",\r\n        props: {\r\n            nodeValue: text,\r\n            children:[]\r\n        }\r\n    }\r\n}\r\n            \r\n/*\r\n* 创建createElement方法\r\n* @type: 标签类型\r\n* @props: 标签属性\r\n* @children: 子标签\r\n*/ \r\nfunction createElement(type, props, ...children){    \r\n    return {\r\n        type: type,\r\n        props: {\r\n            ...props,\r\n            children: children.map((child)=>{\r\n                return typeof child == \"object\" \r\n                        ? child \r\n                        : createTextElement(child)\r\n                    \r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n* @element: createElement创建的值\r\n* @container: 显示的容器\r\n*/ \r\nfunction render(element, container){\r\n    /*编写代码*/  \r\n    console.log(container)\r\n}\r\n    `,\r\n      cases: [{\r\n        title: `var element = \"<h1>hi react!</h1>\";\r\nrender(element, document.getElementById(\"root\"))`,\r\n        fn: 'var test = function(){ document.getElementById(\"root\").innerHTML=\"\"; render(createElement(\"h1\", null, \"hi react!\"), document.getElementById(\"root\")); return document.getElementById(\"root\").innerHTML;}; test();',        \r\n        value: \"<h1>hi react!</h1>\"\r\n      }]\r\n\r\n    }]\r\n  }\r\n}\r\n\r\nexport const Data = getData()\r\n\r\n/*\r\n* 代码列表\r\n*/\r\nexport const CODE = [{\r\n  index: 1,\r\n  content: `\r\n\r\n    `\r\n}]\r\n\r\n/*\r\n* 创建单元测试\r\n*/\r\nexport const CASE = [{\r\n  index: 1,\r\n  cases: []\r\n}]\r\n\r\n/*\r\n* \r\n*/\r\nexport var HEADER = [{\r\n  index: 0,\r\n  title: '总汇',\r\n  actived: true\r\n}, {\r\n  index: 0,\r\n  title: 'createElement',\r\n  codes: [{\r\n    value: ''\r\n  }]\r\n}]\r\n\r\nexport const HEADER_CONTEXT = React.createContext(HEADER)\r\n\r\nexport function updateHeader (nextHeader) {\r\n  HEADER = nextHeader\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport Header from \"../../component/header/index\";\r\nimport List from \"../../component/list/index\";\r\n\r\nimport { HEADER, HEADER_CONTEXT, Data } from \"../../model/index\";\r\n\r\n/*\r\n* 问题1: 各个组件如何获取数据？\r\n* 1. 使用Context上下文，通过Provider方式提供数据,每个组件通过useContext方法获取信息;\r\n\r\n* 问题2: 当value值发生变化时，如何通知每个组件\r\n* 1. 查看组件Provider方式，默认当Provider发生变化时子组件都会被重新渲染;\r\n* 2. 原因是函数式组件没有重新运行;\r\n*/\r\n\r\nexport default class Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {            \r\n            HEADER: HEADER\r\n        }       \r\n    }\r\n    render() { \r\n        console.log(\"Data\", Data);\r\n        return <div>\r\n            <Header data={this.state.HEADER} path=\"home\" />\r\n            {/* 整体布局 */}\r\n            <div className=\"home\">                \r\n                <List data={Data.steps} onChange={(index) => {\r\n                    this.setState({\r\n                        activeIndex: index\r\n                    });\r\n                }} />                  \r\n            </div>\r\n        </div>\r\n    }\r\n}","export function get(name) {\r\n    \r\n    var start = window.location.href.indexOf(\"?\");\r\n    var locationSearch = window.location.href.substr(start + 1, window.location.href.length );\r\n    var paramsArray = locationSearch.split(\"&\");\r\n    for (var i = 0; i < paramsArray.length; i++) {\r\n        var param = paramsArray[i];\r\n        var paramArray = param.split(\"=\");        \r\n        if (paramArray[0] == name) {\r\n            paramArray.shift();\r\n            return paramArray.join(\"=\");\r\n        }\r\n    }\r\n}\r\n","import \"./github-theme.scss\";\r\n\r\nimport React from \"react\";\r\n\r\nexport default function MarkDown(props){    \r\n    return <div className=\"markdown markdown-body\" id=\"markdown\">        \r\n        <div dangerouslySetInnerHTML={{__html: props.html}}></div>        \r\n    </div>\r\n}","import React from \"react\";\r\nimport AceEditor from \"react-ace\";\r\n\r\nimport \"ace-builds/src-noconflict/mode-java\";\r\nimport \"ace-builds/src-noconflict/theme-github\";\r\n\r\n/*\r\n* 创建编辑器\r\n* 1. 设置代码内容;\r\n* 2. 保存代码内容; 将代码传递给公共组件;\r\n*/ \r\n\r\nexport default function Edit(props){\r\n    return <div className=\"edit shadow\">          \r\n        <AceEditor style={{width: \"100%\", height: \"100%\"}} fontSize={16} mode=\"java\" theme=\"github\" value={props.codes} onBlur={(e, edit)=>{\r\n            props.onBlur && props.onBlur(edit.getValue());\r\n        }} />\r\n    </div>\r\n}","export var UNIT_TEST_CONFIG = {\r\n    \"error\": \"测试错误\",\r\n    \"unequal\": \"测试没有通过\",\r\n    \"equal\": \"测试通过\"\r\n}","import React, { useState } from \"react\";\r\nimport {UNIT_TEST_CONFIG} from \"../../model/config\";\r\nimport \"./index.scss\";\r\n\r\n/*\r\n* 设置Case样式\r\n* 1. Case样式状态显示; (错误还是成功)\r\n* 2. 每个Case的状态展示; \r\n*/ \r\n\r\n\r\nexport default function UnitTest(props){\r\n\r\n    return <React.Fragment> \r\n         {\r\n            props.status != \"end\" ? \r\n            <h2 className=\"showStatus\">\r\n                {\r\n                    props.status == \"upload\" ? \"代码上传中......\" : \r\n                    props.status == \"run\" ? \"代码运行中......\" :\r\n                    \"\"\r\n                }\r\n            </h2>\r\n            : null                    \r\n        }   \r\n        <div className=\"markdown markdown-body\">\r\n        \r\n       \r\n        {/* 版本一暂时不需要 */}\r\n        {/* {\r\n            props.data.map((unit, index) => {\r\n                return <a href={\"#case\" + ( index + 1)}>case{index + 1}</a>\r\n            })\r\n        } */}\r\n\r\n        <div className=\"cases\">\r\n            {\r\n                props.data.map((unit, index)=>{\r\n                    \r\n                    console.log(\"unit\", unit, \"index\", index);\r\n\r\n                    return <div className=\"case\" key={index}>\r\n                        <h3 className={unit.status == \"equal\" ? \"successStatus\" : \"errorStatus\"}>{UNIT_TEST_CONFIG[unit.status]}</h3>\r\n                        <p><strong>执行: </strong></p>\r\n                        <pre>\r\n                            <code className=\"language-js\">\r\n                                {unit.title}\r\n                            </code>\r\n                        </pre>\r\n\r\n                        <p><strong>期望: </strong></p>\r\n                        <pre>\r\n                            <code className=\"language-js\">\r\n                                {\r\n                                    unit.correctValue == undefined ? \"undefined\" : typeof unit.correctValue == \"object\" ? JSON.stringify(unit.correctValue, null, 4) : unit.correctValue.toString()\r\n                                }\r\n                            </code>\r\n                        </pre>\r\n\r\n                        <p><strong>实际: </strong></p>\r\n                        <pre>\r\n                            <code className=\"language-js\">\r\n                                {\r\n                                    unit.value == undefined ? \"undefined\" : typeof unit.value == \"object\" ? JSON.stringify(unit.value, null, 4) : unit.value.toString()\r\n                                }\r\n                            </code>\r\n                        </pre>\r\n                    </div>\r\n                })    \r\n            }\r\n        </div>\r\n    </div>\r\n    </React.Fragment>\r\n}\r\n\r\n","\r\nimport React, { Component } from 'react';\r\nimport {get as getUrl} from \"../../util/url\";\r\nimport {set as setCookie, get as getCookie} from \"pure-funs/lib/cookie\";\r\n\r\n\r\nimport Header from \"../../component/header/index\";\r\nimport MarkDown from \"../../component/markdown/index\";\r\nimport Edit from \"../../component/edit/index\";\r\nimport UnitTest from \"../../component/unittest/index\";\r\n\r\n// import Worker from \"../../model/run.worker.js\";\r\n\r\n// import * as serviceWorker from './serviceWorker';\r\nimport { HEADER, HEADER_CONTEXT, Data } from \"../../model/index\";\r\n\r\n/*\r\n* 问题1: 各个组件如何获取数据？\r\n* 1. 使用Context上下文，通过Provider方式提供数据,每个组件通过useContext方法获取信息;\r\n\r\n* 问题2: 当value值发生变化时，如何通知每个组件\r\n* 1. 查看组件Provider方式，默认当Provider发生变化时子组件都会被重新渲染;\r\n* 2. 原因是函数式组件没有重新运行;\r\n*/\r\n\r\n\r\nexport default class Problem extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            id: getUrl(\"id\"),\r\n            HEADER: HEADER,\r\n            UnitTest: [],\r\n        };\r\n\r\n        /*\r\n        * 创建一个Worker对象\r\n        */\r\n\r\n        // 改用iframe方式进行代码运行,因为有些代码涉及到DOM操作;\r\n        // this.MyWorker = new Worker();\r\n        // this.MyWorker.onmessage = function (e) {\r\n        \r\n        var that = this;\r\n        window.onmessage = function(e){\r\n            that.state.UnitTest.push(e.data);           \r\n\r\n            var stepObj = that.getStep();            \r\n            if(e.data.status != \"equal\"){\r\n                stepObj.status = \"fail\";\r\n            }else{\r\n                stepObj.status = \"success\";\r\n            }\r\n\r\n            that.state.UnitTestStatus = \"end\";\r\n            that.forceUpdate();\r\n\r\n\r\n            that.scrollTop(window.innerHeight - 50);\r\n            //当测试用例已经完成，修改提示状态\r\n\r\n            //2020/8/26: 只测试单个用例;\r\n            // if(that.state.UnitTest.length == stepObj.cases.length){\r\n            //     that.state.UnitTestStatus = \"end\";\r\n            //     that.forceUpdate();                \r\n\r\n            //     // 之前case都通过测试，则stepObj.status则是undefined，那么则给整个函数设置一个正确的状态;\r\n            //     if(stepObj.status == undefined){\r\n            //         stepObj.status = \"success\";\r\n            //     }\r\n            // }\r\n\r\n            that.forceUpdate();\r\n\r\n            that.saveData();\r\n        }\r\n\r\n        // useBeforeunload(()=>{\r\n        //     console.log(\"page close\");\r\n        // });\r\n\r\n        /*\r\n        * 页面关闭时保存data数据, 会导致Cookie删除失败;\r\n        */\r\n        // window.onbeforeunload = function(){            \r\n        //     localStorage.setItem(\"_DATA_\", JSON.stringify(Data));\r\n        // }\r\n    }\r\n    saveData(){\r\n        localStorage.setItem(\"_DATA_\", JSON.stringify(Data));\r\n    }\r\n    getStep(){\r\n        var { id } = this.state;\r\n        var stepObj = Data[\"steps\"][id - 1];\r\n        return stepObj;\r\n    }\r\n    scrollTop(yAxis){\r\n        document.querySelector(\".content-right\").scrollTop = yAxis;\r\n    }    \r\n    render() {\r\n        var stepObj = this.getStep();\r\n        return (\r\n            <React.Fragment>\r\n                {/* <Beforeunload onBeforeunload={()=>{\r\n                    alert(123);\r\n                }} /> */}\r\n                <Header data={this.state.HEADER}/>\r\n                {/* 整体布局 */}\r\n                <div className=\"content\">                \r\n                    <div className=\"content-left\">\r\n                        {/* 文档显示 */}\r\n                        <MarkDown html={typeof stepObj == \"object\" ? stepObj.markdown : \"\"} />\r\n                    </div>\r\n                    <div className=\"content-right\">\r\n                        <Edit codes={typeof stepObj == \"object\" ? stepObj.codes : \"no code\"} onBlur={(content) => {\r\n                            stepObj.codes = content;\r\n                        }} />\r\n                        <p className=\"clearfix\">\r\n                            <button className={this.state.UnitTestStatus != \"run\" ? \"btn\" : \"btn btn-disable\"} style={{ \"float\": \"right\", \"marginTop\": \"15px\", \"marginLeft\": \"0px\"}} onClick={(e) => {\r\n                                \r\n                                // var runner = document.getElementById(\"runner\");\r\n                                \r\n                                \r\n                                if(this.state.UnitTestStatus == \"run\") return false;\r\n                                this.saveData();\r\n\r\n                                //清空测试用例;\r\n                                delete stepObj.status;\r\n                                \r\n                                this.state.UnitTest = [];\r\n                                this.state.UnitTestStatus = \"run\";\r\n                                this.forceUpdate();\r\n                                \r\n                                //改变滚动条位置\r\n                                this.scrollTop(window.innerHeight + 500);\r\n                                                                                                \r\n                                var index = 0;\r\n                                // 给每个用例增加延迟效果                                                                \r\n\r\n                                // 第一个版本只测试第一个用例;\r\n                                // this.handle = setInterval(()=>{                                        \r\n                                \r\n                                setTimeout(()=>{\r\n                                    \r\n                                    var obj = stepObj.cases[index];\r\n                                    // this.MyWorker.postMessage([index, stepObj.codes, obj.fn, obj.value]);                                    \r\n                                    window.frames[0].postMessage([index, stepObj.codes, obj.fn, obj.value, obj.title], \"*\");\r\n\r\n\r\n                                    // if(++index >= stepObj.cases.length){\r\n                                        //     clearInterval(this.handle);\r\n                                        // }                                        \r\n                                }, 2000);\r\n                                \r\n\r\n                                // stepObj.cases.map((obj, index) => {\r\n                                //     console.log(obj, index);\r\n                                //     this.MyWorker.postMessage([index, stepObj.codes, obj.fn, obj.value]);\r\n                                // });\r\n                            }}>\r\n                                {\r\n                                    this.state.UnitTestStatus != \"run\" ? \"运行代码\" : \"运行中...\"\r\n                                }\r\n                            </button>\r\n                        </p>\r\n                        <UnitTest status={this.state.UnitTestStatus}  data={this.state.UnitTest} />\r\n                        <iframe id=\"runner\"  src=\"./runner.html\" style={{\"display\": \"none\"}}></iframe>\r\n                    </div>                \r\n                </div>\r\n            </React.Fragment>)        \r\n    }\r\n}","import './index.scss';\r\nimport \"./style/reset.scss\";\r\nimport \"./style/common.scss\";\r\nimport \"./style/layout.scss\";\r\n\r\n\r\nimport React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport {HashRouter as Router, Route, Switch} from \"react-router-dom\";\r\n\r\nimport Home from \"./pages/home/index\";\r\nimport Problem from \"./pages/problem/index\";\r\n\r\nconsole.log(Router, Route, Home,Problem);\r\n\r\n/*\r\n* 问题1: 各个组件如何获取数据？\r\n* 1. 使用Context上下文，通过Provider方式提供数据,每个组件通过useContext方法获取信息;\r\n\r\n* 问题2: 当value值发生变化时，如何通知每个组件\r\n* 1. 查看组件Provider方式，默认当Provider发生变化时子组件都会被重新渲染;\r\n* 2. 原因是函数式组件没有重新运行;\r\n*/ \r\n\r\n\r\nReactDOM.render(  \r\n  <Router>\r\n    <Switch>\r\n      <Route exact path=\"/\" component={Home}></Route>\r\n      <Route path=\"/problem\" component={Problem}></Route>\r\n    </Switch>\r\n  </Router>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}